tareas_SIN_hilos.py
1- El tiempo de ejecución no es predecible, ya que varía según la maquina, y su velocidad, en la que se esté ejecutando .
2- Ej. "Máxima velocidad posible": Un ejemplo de máxima velocidad posible es el minado de cripto monedas. La velocidad y eficiencia del minado depende únicamente de la maquina en la cual se esté llevando a cabo el proceso.
3- Ej. "Velocidad de respuesta no dependiente de la velocidad del procesamiento": Un ejemplo de naturaleza impredecible podría ser esperar una respuesta de un servicio web externo. La velocidad de la respuesta cuando hacemos una solicitud depende de muchos factores tales como; la calidad y velocidad de la red, la cantidad de solicitudes que el servidor esté recibiendo, etc.

tareas_CON_hilos.py

1- Si mejoró el tiempo de ejecución en relación con el programa sin hilos.
2- Se ejecutan perfectamente en el orden establecido; 
inicio tarea 1
inicio tarea 2
inicio tarea 3
fin tarea 1 (...)
fin tarea 2 (...)
fin tarea 3 (...)
3- Ej. multi-hilado: La reproducción de videos de streaming; cuando un usuario reproduce un video en una plataforma como Netflix, el reproductor de video descarga y procesa múltiples segmentos de video en paralelo, lo que permite una reproducción más fluida.

sumador-restador_CON_race.py

1-  Lo que yo noté respecto al tiempo de ejecución fue que el código con race tardó más en finalizar la tarea que el código sumador-restador.py

2- Los valores finales siempre varían con cada ejecución. Esto sucede porque los hilos pueden acceder y modificar la variable "acumular" al mismo tiempo, lo que hace que genere errores.
Este problema se puede solucionar haciendo que las operaciones se ejecuten sin que otro hilo las interrumpa utilizando un semáforo.